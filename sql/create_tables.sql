CREATE TABLE IF NOT EXISTS users (
 id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
 name VARCHAR(255) NOT NULL,
 password_hash VARCHAR(255) NOT NULL,
 CONSTRAINT pk_user PRIMARY KEY (id),
 CONSTRAINT UQ_USER_NAME UNIQUE (name)
);

CREATE TABLE IF NOT EXISTS user_roles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR(255) NOT NULL,
    user_id BIGINT,
    CONSTRAINT pk_user_role PRIMARY KEY (id),
    CONSTRAINT fk_user_role FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE TABLE SPRING_SESSION(
    PRIMARY_ID CHAR(36) NOT NULL PRIMARY KEY,
    SESSION_ID CHAR(36) NOT NULL,
    CREATION_TIME BIGINT NOT NULL,
    LAST_ACCESS_TIME BIGINT NOT NULL,
    MAX_INACTIVE_INTERVAL INT NOT NULL,
    EXPIRY_TIME BIGINT NOT NULL,
    PRINCIPAL_NAME VARCHAR(100) DEFAULT NULL
);

CREATE UNIQUE INDEX SPRING_SESSION_IX1 ON SPRING_SESSION (SESSION_ID);
CREATE INDEX SPRING_SESSION_IX2 ON SPRING_SESSION (EXPIRY_TIME);
CREATE INDEX SPRING_SESSION_IX3 ON SPRING_SESSION (PRINCIPAL_NAME);

CREATE TABLE SPRING_SESSION_ATTRIBUTES(
    SESSION_PRIMARY_ID CHAR(36) NOT NULL,
    ATTRIBUTE_NAME VARCHAR(200) NOT NULL,
    ATTRIBUTE_BYTES BYTEA NOT NULL,
    CONSTRAINT SPRING_SESSION_ATTRIBUTES_PK PRIMARY KEY (SESSION_PRIMARY_ID, ATTRIBUTE_NAME),
    CONSTRAINT SPRING_SESSION_ATTRIBUTES_FK FOREIGN KEY (SESSION_PRIMARY_ID) REFERENCES SPRING_SESSION(PRIMARY_ID) ON DELETE CASCADE
);

CREATE TABLE tokens (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    token_value VARCHAR(255) NOT NULL,
    token_validity BOOLEAN,
    user_id BIGINT,
    CONSTRAINT pk_token PRIMARY KEY (id),
    CONSTRAINT fk_user_token FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE TYPE task_state AS ENUM ('PENDING', 'PROGRESS', 'COMPLETED');
CREATE TYPE task_priority AS ENUM ('LOW', 'MEDIUM', 'HIGH');

CREATE TABLE IF NOT EXISTS tasks (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    title VARCHAR(255) NOT NULL,
    description VARCHAR(1000),
    initiator_id BIGINT NOT NULL,
    state task_state,
    priority task_priority,
    CONSTRAINT pk_event PRIMARY KEY (id),
    CONSTRAINT FK_TASK_ON_INITIATOR
      FOREIGN KEY (initiator_id) REFERENCES users (id) ON DELETE CASCADE
);

CREATE CAST (CHARACTER VARYING as task_state) WITH INOUT AS IMPLICIT;
CREATE CAST (CHARACTER VARYING as task_priority) WITH INOUT AS IMPLICIT;

CREATE TABLE IF NOT EXISTS executors_to_tasks (
    user_id BIGINT NOT NULL,
    task_id BIGINT NOT NULL,
    CONSTRAINT pk_executors_to_tasks PRIMARY KEY (user_id, task_id),
    CONSTRAINT FK_executors_to_tasks_to_users
      FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
    CONSTRAINT FK_executors_to_tasks_to_tasks
      FOREIGN KEY (task_id) REFERENCES tasks (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS comments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    author_id BIGINT NOT NULL,
    task_id BIGINT NOT NULL,
    text VARCHAR(1000),
    CONSTRAINT pk_comments PRIMARY KEY (id),
    CONSTRAINT FK_comments_to_users
     FOREIGN KEY (author_id) REFERENCES users (id) ON DELETE CASCADE,
    CONSTRAINT FK_comments_to_tasks
     FOREIGN KEY (task_id) REFERENCES tasks (id) ON DELETE CASCADE
);